Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# 网络编程基础

## TCP

### 可靠

### 三次握手<br/>四次分手

### 效率低

## UDP

### 不可靠

### 效率高

### 随缘随发

## InetAddress类

### 根据ip得到对象

### 根据域名得到对象

### 根据localhost得到本机对象

## Socket前置课程

### IO流

### isInputStream<br/>isOutputStrea<br/>跟eof一样，读完为真<br/>写完为真

#### 用不好不要用阿哥

#### flush最好在循环里面用<br/>慢点来单元测试

#### shutdownXX<br/>系列是单向关闭流<br/>close是会关闭SOCKET的

### netstat \-ano|findstr xxxxx<br/>win下查看端口情况

#### 本地地址下显示<br/>本地监听地址和端口<br/>0\.0\.0\.0/8088

#### 外部地址<br/>外部地址访问的端口<br/>192\.168\.1\.1/8088

##### 端口只能显示链接情况，<br/>这个链接情况可能是访问对面<br/>也可能是被对面访问

#### 状态<br/>listering<br/>Established

## tcp

### Socket流

#### Socket\.getInputstream

#### SOCKET<br/>输入输出流本质都是节点流

#### Socket\.getOutputStream

### Socket<br/>服务端

#### 1\.开启端口监听

##### ServerSocket

#### 2\.开启Socke池

##### 端口监听对象\.accept

#### 3\.开启Socket专用输入流读取信息<br/>这个输入流是节点流

##### getInput

##### 可以通过bufered包装<br/>也可以通过转换流转换<br/>转换的时候可以设置编码格式

###### 发送文本就用转换流<br/>发送连续视频就用buffered 流

##### socketAccept\.shutdownInput\(\);

###### 只是只是读取完毕<br/>没有关闭socket<br/>如果关闭了流或者外层流<br/>会自动调用socket关闭

#### 4\.关闭输入流<br/>5\.关闭socket池<br/>6\.关闭端口监听程序

##### 获得的SOCKET流只能最后关闭，<br/>不然提前关闭会自动关闭SOCKET链接

### Socket<br/>客户端

#### 1\.具体指定要访问IP的端口<br/>通过Socket去寻找

##### Socket<br/>ip 和 port

#### 2\.链接成功后，获取Socket专用输出流<br/>这个输出流也是节点流

##### getOUTPUT

##### 可以通过buffered包装<br/>也可以通过转换流转换<br/>转换的时候可以设置解码格式

###### 发送文本就用转换流<br/>发送连续视频就用buffered 流

##### socketAccept\.shutdownOutput\(\);

###### 只是写入完毕<br/>么有关闭SOCKET<br/>如果关闭流或者外层流<br/>会自动调用SCOKET关闭

#### 3\.关闭流<br/>4\.关闭socket访问程序

##### 获得的SOCKET流只能最后关闭，<br/>不然提前关闭会自动关闭SOCKET链接

## udp

### 通过datagramSocket<br/>来指定端口

#### 这一步在TCP是系统自己做的

### UDP通过包来传递数据

#### 指定数据，大小，端口，地址

#### 数据是提前准备好的，要用的话直接转成数组进行操作<br/>而TCP 也是转换成数组操作

#### 装包前先转格式<br/>拆包后先转格式

### 通过datagramPack<br/>来链接发送包/接受包

#### UDP对象\.receive\(pack\)

##### 这2步如果在TCP<br/>就是系统做的

##### 所以完毕后要输入结束标记<br/>手动关流

##### 而UDP一个包只能用一次，用完就没有了

#### UDP发送对象send\(pacj\)

### udp是单线程，<br/>端口不由系统指定<br/>由程序员指定

#### TCP 的访问端口和IP在生成线程的时候就指定

#### 而UDP需要在创建包的时候指定

#### 由于UDP没有建立机制，<br/>所以CODE执行是线性的机制

##### 而TCP也是一样的

## TEXT环境和实际的运行环境是不一样的<br/>千万要注意
> leftSide=`true`


## 测试环境是在src开始
> leftSide=`true`


## 实际运行环境是在目录下开始的<br/>"模块/目录/子目录/\.\.\."
> leftSide=`true`

